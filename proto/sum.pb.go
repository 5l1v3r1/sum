// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/sum.proto

/*
Package sum is a generated protocol buffer package.

It is generated from these files:
	proto/sum.proto

It has these top-level messages:
	Empty
	Meta
	Record
	Query
	Response
	ServerInfo
*/
package sum

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Meta struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Meta) Reset()                    { *m = Meta{} }
func (m *Meta) String() string            { return proto.CompactTextString(m) }
func (*Meta) ProtoMessage()               {}
func (*Meta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Meta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Meta) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Record struct {
	Id   string    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Data []float32 `protobuf:"fixed32,2,rep,packed,name=data" json:"data,omitempty"`
	Meta []*Meta   `protobuf:"bytes,3,rep,name=meta" json:"meta,omitempty"`
}

func (m *Record) Reset()                    { *m = Record{} }
func (m *Record) String() string            { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()               {}
func (*Record) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Record) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Record) GetData() []float32 {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Record) GetMeta() []*Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

// TODO: extend this to support other types of query
type Query struct {
	// vector id to query for
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Query) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Response struct {
	Success bool    `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Msg     string  `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Record  *Record `protobuf:"bytes,3,opt,name=record" json:"record,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Response) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *Response) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *Response) GetRecord() *Record {
	if m != nil {
		return m.Record
	}
	return nil
}

type ServerInfo struct {
	Version string   `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Uptime  uint64   `protobuf:"varint,2,opt,name=uptime" json:"uptime,omitempty"`
	Pid     uint64   `protobuf:"varint,3,opt,name=pid" json:"pid,omitempty"`
	Uid     uint64   `protobuf:"varint,4,opt,name=uid" json:"uid,omitempty"`
	Argv    []string `protobuf:"bytes,5,rep,name=argv" json:"argv,omitempty"`
	Records uint64   `protobuf:"varint,6,opt,name=records" json:"records,omitempty"`
}

func (m *ServerInfo) Reset()                    { *m = ServerInfo{} }
func (m *ServerInfo) String() string            { return proto.CompactTextString(m) }
func (*ServerInfo) ProtoMessage()               {}
func (*ServerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ServerInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ServerInfo) GetUptime() uint64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *ServerInfo) GetPid() uint64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *ServerInfo) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ServerInfo) GetArgv() []string {
	if m != nil {
		return m.Argv
	}
	return nil
}

func (m *ServerInfo) GetRecords() uint64 {
	if m != nil {
		return m.Records
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "sum.Empty")
	proto.RegisterType((*Meta)(nil), "sum.Meta")
	proto.RegisterType((*Record)(nil), "sum.Record")
	proto.RegisterType((*Query)(nil), "sum.Query")
	proto.RegisterType((*Response)(nil), "sum.Response")
	proto.RegisterType((*ServerInfo)(nil), "sum.ServerInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VectorService service

type VectorServiceClient interface {
	Info(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServerInfo, error)
	Create(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Response, error)
	Update(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Response, error)
	Read(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error)
}

type vectorServiceClient struct {
	cc *grpc.ClientConn
}

func NewVectorServiceClient(cc *grpc.ClientConn) VectorServiceClient {
	return &vectorServiceClient{cc}
}

func (c *vectorServiceClient) Info(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServerInfo, error) {
	out := new(ServerInfo)
	err := grpc.Invoke(ctx, "/sum.VectorService/Info", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vectorServiceClient) Create(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/sum.VectorService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vectorServiceClient) Update(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/sum.VectorService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vectorServiceClient) Read(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/sum.VectorService/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vectorServiceClient) Delete(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/sum.VectorService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VectorService service

type VectorServiceServer interface {
	Info(context.Context, *Empty) (*ServerInfo, error)
	Create(context.Context, *Record) (*Response, error)
	Update(context.Context, *Record) (*Response, error)
	Read(context.Context, *Query) (*Response, error)
	Delete(context.Context, *Query) (*Response, error)
}

func RegisterVectorServiceServer(s *grpc.Server, srv VectorServiceServer) {
	s.RegisterService(&_VectorService_serviceDesc, srv)
}

func _VectorService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sum.VectorService/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorServiceServer).Info(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VectorService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sum.VectorService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorServiceServer).Create(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

func _VectorService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sum.VectorService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorServiceServer).Update(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

func _VectorService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sum.VectorService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorServiceServer).Read(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _VectorService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sum.VectorService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorServiceServer).Delete(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

var _VectorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sum.VectorService",
	HandlerType: (*VectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _VectorService_Info_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _VectorService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _VectorService_Update_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _VectorService_Read_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _VectorService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sum.proto",
}

func init() { proto.RegisterFile("proto/sum.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xcd, 0x4a, 0xeb, 0x40,
	0x18, 0xbd, 0x49, 0x26, 0x69, 0xfb, 0x95, 0xde, 0x5e, 0x86, 0xcb, 0xbd, 0x43, 0x41, 0x08, 0x29,
	0x95, 0xac, 0xaa, 0xd4, 0x47, 0x50, 0x17, 0x22, 0x2e, 0x1c, 0xd1, 0x8d, 0xab, 0x31, 0xf9, 0x2c,
	0x81, 0xe6, 0x87, 0xf9, 0x09, 0xf4, 0x2d, 0x7c, 0x36, 0x9f, 0x48, 0x66, 0x26, 0x45, 0x51, 0xd0,
	0xdd, 0x39, 0x5f, 0x4e, 0xbe, 0x73, 0xe6, 0xcc, 0xc0, 0xbc, 0x93, 0xad, 0x6e, 0x4f, 0x94, 0xa9,
	0xd7, 0x0e, 0xd1, 0x48, 0x99, 0x3a, 0x1b, 0x41, 0x7c, 0x59, 0x77, 0x7a, 0x9f, 0x9d, 0x02, 0xb9,
	0x41, 0x2d, 0x28, 0x05, 0xd2, 0x88, 0x1a, 0x59, 0x90, 0x06, 0xf9, 0x84, 0x3b, 0x4c, 0xff, 0x42,
	0xdc, 0x8b, 0x9d, 0x41, 0x16, 0xba, 0xa1, 0x27, 0xd9, 0x35, 0x24, 0x1c, 0x8b, 0x56, 0x96, 0xf4,
	0x37, 0x84, 0x55, 0x39, 0xfc, 0x11, 0x56, 0xa5, 0xdd, 0x51, 0x0a, 0x2d, 0x58, 0x98, 0x46, 0x79,
	0xc8, 0x1d, 0xa6, 0x47, 0x40, 0x6a, 0xd4, 0x82, 0x45, 0x69, 0x94, 0x4f, 0x37, 0x93, 0xb5, 0xcd,
	0x61, 0x0d, 0xb9, 0x1b, 0x67, 0xff, 0x21, 0xbe, 0x35, 0x28, 0xf7, 0x9f, 0x77, 0x65, 0x8f, 0x30,
	0xe6, 0xa8, 0xba, 0xb6, 0x51, 0x48, 0x19, 0x8c, 0x94, 0x29, 0x0a, 0x54, 0xca, 0x09, 0xc6, 0xfc,
	0x40, 0xe9, 0x1f, 0x88, 0x6a, 0xb5, 0x1d, 0xf2, 0x59, 0x48, 0x97, 0x90, 0x48, 0x97, 0x8e, 0x45,
	0x69, 0x90, 0x4f, 0x37, 0x53, 0xe7, 0xe8, 0x03, 0xf3, 0xe1, 0x53, 0xf6, 0x12, 0x00, 0xdc, 0xa1,
	0xec, 0x51, 0x5e, 0x35, 0xcf, 0xad, 0xdd, 0xdf, 0xa3, 0x54, 0x55, 0xdb, 0x0c, 0x01, 0x0e, 0x94,
	0xfe, 0x83, 0xc4, 0x74, 0xba, 0xaa, 0x7d, 0x05, 0x84, 0x0f, 0xcc, 0xfa, 0x76, 0x95, 0xb7, 0x20,
	0xdc, 0x42, 0x3b, 0x31, 0x55, 0xc9, 0x88, 0x9f, 0x18, 0xdf, 0x86, 0x90, 0xdb, 0x9e, 0xc5, 0x69,
	0x64, 0x1b, 0xb5, 0xd8, 0x3a, 0xf9, 0x08, 0x8a, 0x25, 0x4e, 0x79, 0xa0, 0x9b, 0xd7, 0x00, 0x66,
	0x0f, 0x58, 0xe8, 0x56, 0xda, 0x60, 0x55, 0x81, 0x74, 0x05, 0xc4, 0xa5, 0x03, 0x77, 0x02, 0x77,
	0x5b, 0x8b, 0xb9, 0xc3, 0xef, 0xd1, 0xb3, 0x5f, 0xf4, 0x18, 0x92, 0x73, 0x89, 0x42, 0x23, 0xfd,
	0x78, 0xd4, 0xc5, 0x6c, 0x20, 0xbe, 0x42, 0xaf, 0xbb, 0xef, 0xca, 0x9f, 0x75, 0x4b, 0x20, 0x1c,
	0x45, 0x39, 0xd8, 0xba, 0xcb, 0xf9, 0x2a, 0x5a, 0x41, 0x72, 0x81, 0x3b, 0xd4, 0xf8, 0xad, 0xec,
	0x29, 0x71, 0x2f, 0xee, 0xec, 0x2d, 0x00, 0x00, 0xff, 0xff, 0x5d, 0xf2, 0x27, 0x3e, 0x84, 0x02,
	0x00, 0x00,
}
